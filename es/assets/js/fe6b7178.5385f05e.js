"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[124],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(a),d=r,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6852:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:1,title:"Objectos custom",description:"Guarda y obt\xe9n objetos custom con Rtag"},i=void 0,l={unversionedId:"rtag/feature/custom-objects",id:"rtag/feature/custom-objects",title:"Objectos custom",description:"Guarda y obt\xe9n objetos custom con Rtag",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/rtag/feature/custom-objects.md",sourceDirName:"rtag/feature",slug:"/rtag/feature/custom-objects",permalink:"/es/rtag/feature/custom-objects",draft:!1,editUrl:"https://github.com/saicone/docs/blob/main/docs/rtag/feature/custom-objects.md",tags:[],version:"current",lastUpdatedBy:"Rubenicos",lastUpdatedAt:1689097240,formattedLastUpdatedAt:"11 jul 2023",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Objectos custom",description:"Guarda y obt\xe9n objetos custom con Rtag"},sidebar:"rtag",previous:{title:"Caracter\xedsticas",permalink:"/es/rtag/feature/"},next:{title:"Tag Stream",permalink:"/es/rtag/feature/stream"}},s={},u=[{value:"Informaci\xf3n",id:"informaci\xf3n",level:2},{value:"RtagSerializer",id:"rtagserializer",level:3},{value:"RtagDeserializer",id:"rtagdeserializer",level:3},{value:"Ejemplo",id:"ejemplo",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"informaci\xf3n"},"Informaci\xf3n"),(0,r.kt)("p",null,"Rtag por defecto solo soporta objetos normales de Java (String, Integer, List... etc), pero tambi\xe9n tiene la opci\xf3n de registrar serializadores de objetos haciendo posible su almacenamiento en un NBTTagCompound."),(0,r.kt)("h3",{id:"rtagserializer"},"RtagSerializer"),(0,r.kt)("p",null,"Es la instancia que funciona para convertir tu objeto custom en un Map, en otras palabras, designar cada field del objeto como un value con su respectiva key."),(0,r.kt)("h3",{id:"rtagdeserializer"},"RtagDeserializer"),(0,r.kt)("p",null,"Es la instancia para convertir un Map en tu objeto custom, suponiendo que este fue serializado en un Map, ahora hay que revertir ese proceso."),(0,r.kt)("h2",{id:"ejemplo"},"Ejemplo"),(0,r.kt)("p",null,"Primeramente, supongamos que tienes este objeto custom para guardar data adicional en los items:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package my.plugin;\n\npublic class CustomData {\n\n    private final String type;\n    private int level;\n    private boolean broken;\n\n    public CustomData(String type, int level, boolean broken) {\n        this.type = type;\n        this.level = level;\n        this.broken = broken;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public int getLevel() {\n        return level;\n    }\n\n    public boolean isBroken() {\n        return broken;\n    }\n\n    public void setLevel(int level) {\n        this.level = level;\n    }\n\n    public void setBroken(boolean broken) {\n        this.broken = broken;\n    }\n\n    public boolean equals(Object object) {\n        if (object instanceof CustomData) {\n            CustomData data = (CustomData) object;\n            return data.getType().equals(type) && data.getLevel == level && data.isBroken == broken;\n        }\n        return false;\n    }\n}\n")),(0,r.kt)("p",null,"Ahora debes crear un class que funcione como serializador y deserializador:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package my.plugin;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CustomDataSerializer implements RtagSerializer<CustomData>, RtagDeserializer<CustomData> {\n    \n    // ID usado para convertir el objeto custom en un Map\n    // CustomData -> Map\n    @Override\n    public String getInID() {\n        // Se sugiere usar un ID con el formado de <plugin>:<objeto> para evitar\n        // incompatibilidad con otros plugins\n        return "myplugin:CustomData";\n    }\n    \n    // ID usado para convertir un Map en un objeto custom\n    // Map -> CustomData\n    @Override\n    public String getOutID() {\n        // Mismo ID que el de arriba\n        return "myplugin:CustomData";\n    }\n\n    // Convertir el objeto de CustomData en un Map\n    @Override\n    public Map<String, Object> serialize(CustomData data) {\n        Map<String, Object> map = new HashMap();\n        map.put("type", data.getType());\n        map.put("level", data.getLevel());\n        map.put("broken", data.isBroken());\n        return map;\n    }\n    \n    // Convertir el Map en un objeto de CustomData\n    @Override\n    public CustomData deserialize(Map<String, Object> map) {\n        String type = map.get("type");\n        Integer level = map.get("level");\n        Boolean broken = map.get("broken");\n\n        if (type == null || level == null || broken == null) {\n            return null;\n        } else {\n            return new CustomData(type, level, broken);\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Luego debes registrar el class en la instancia de Rtag que est\xe1s utilizando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Rtag rtag = // Instancia de Rtag de alguna parte;\nCustomDataSerializer serializer = new CustomDataSerializer();\n\nrtag.putSerializer(CustomData.class, serializer);\nrtag.putDeserializer(serializer);\n")),(0,r.kt)("p",null,"Ahora al utilizar la instancia de Rtag donde registraste el CustomDataSerializer podr\xe1s guardar y almacenar el objeto de CustomData."),(0,r.kt)("p",null,"En este ejemplo se usar\xe1 un RtagItem con la instancia de Rtag que tiene registrado el CustomDataSerializer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ItemStack item = // Item de alguna parte;\nRtag rtag = // Instancia de Rtag con el CustomDataSerializer;\n\nRtagItem rtagItem = new RtagItem(rtag, item);\n\n// -- Guardar la data custom en el item\n\n// Data custom para el item\nCustomData data = new CustomData("EPIC", 30, false);\n// Se guardar\xe1 en la ruta "custom" -> "data"\nrtagItem.set(data, "custom", "data");\n\n// Se cargan los cambios en el item original\nrtagItem.load();\n\n\n// -- Obtener la data custom del item\n\n// Se obtiene desde la ruta guardada "custom" -> "data"\nCustomData itemData = rtagItem.get("custom", "data");\n// Se compara si la data es igual\nSystem.out.println(data.equals(itemData));\n')))}m.isMDXComponent=!0}}]);